function Get-DNSIssues {
    <#
      .SYNOPSIS
      Check for DNS mismatches and errors
      .DESCRIPTION
      This iterates through DNS reverse records looking for mismatches and errors
      .EXAMPLE
      Get-DNSIssues | Select-Object -Property Subnet,DNSName,FWD,RecordMatch,PTR,Alive | Format-Table
    #>
    #Requires -Modules dnsserver
    ### Get PDC to use as DNS server to query
    $PDC    = ([DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).DomainControllers | Select-Object -Property Forest,@{n='Name';e={$_.Name.Split('.')[0]}},Roles | Where-Object {$_.Roles -contains 'pdc'} | Select-Object -ExpandProperty Name
    $DNSErr = @()
    $pi     = 0 ### Progress Bar
    # Get Reverse Lookup Zones
    $PTRLookupZones = Get-DnsServerZone -ComputerName $PDC | Where-Object IsReverseLookupZone -eq $True | Where-Object IsAutoCreated -eq $False | Where-Object ZoneName -notlike '*ip6*'

    ### Progress Bar
    $Progress = @{
        Activity         = 'Working through records . . .'
        CurrentOperation = 'Loading'
        PercentComplete  = 0
    }

    ForEach ($PTRLookupZone in $PTRLookupZones) {
        $SVRS = $null

        # Get Zone Information
        $DNSZoneName = $PTRLookupZone.ZoneName

        # Get IP Information
        $PTRIP       = $PTRLookupZone.ZoneName.TrimEnd('.in-addr.arpa')
        $PTRIPSuffix = $PTRIP.Split('.')
        [array]::reverse($PTRIPSuffix)
        $PTRIPSuffix = $PTRIPSuffix -join '.'

        # Get Servers
        $SVRS = Get-DnsServerResourceRecord -ZoneName $DNSZoneName -ComputerName $PDC | Where-Object HostName -ne '@'
        ForEach ($SVR in $SVRS) {
            # Get Server IP Address
            $SVRHostName  = $SVR.HostName
            $SVRIPSuffix  = $SVRHostName.Split('.')
            [array]::reverse($SVRIPSuffix)
            $SVRIPSuffix  = $SVRIPSuffix -join '.'
            $SVRIP = $PTRIPSuffix + '.' + $SVRIPSuffix
            
            # Get Server DNS Hostname
            $SVRDNSName   = $SVR.RecordData.PtrDomainName
            $SVRDNSName   = $SVRDNSName.TrimEnd('.')
            $pi++
            
            ### Progress Bar
            [int]$percentage           = ($pi / $SVRS.Count) * 100
            $Progress.CurrentOperation = "$pi of $($SVRS.Count) - $SVRDNSName"
            $Progress.PercentComplete  = $percentage
            Write-Progress @Progress

            # Get Server DNS Subnet
            $SVRDNSSubnet = $SVRIP.Split('.')[0] + '.' + $SVRIP.Split('.')[1] + '.' + $SVRIP.Split('.')[2] + '.0/24'

            # Resolve DNS Name
            Try {
                $DNSName = (Resolve-DnsName -Name $SVRDNSName -ErrorAction Stop)
            } Catch {
                Write-Host ("FWD Record not found for $SVRDNSName of PTR Record $SVRIP") -ForegroundColor Red
            }
            If ($DNSName) {
                $Control = 0
                ForEach ($DNSRecord in $DNSName) {
                    # Get Reverse DNS Name
                    $DNSIP = $DNSRecord.IPAddress
                    If (Test-Connection -ComputerName $DNSIP -Count 1 -Quiet){$alive = $true} Else {$alive = $false}
                    If ($DNSIP -eq $SVRIP){$Control = 1}
                }
                If ($Control -eq '0') {
                    $DNSErr += New-Object -TypeName PSObject -Property ([ordered]@{
                        'Subnet'      = $SVRDNSSubnet
                        'DNSName'     = $SVRDNSName
                        'RecordMatch' = 'No Match'
                        'FWD'         = $DNSIP
                        'PTR'         = $SVRIP
                        'Alive'       = $alive
                    })
                } ElseIf ($alive -eq $false){
                    $DNSErr += New-Object -TypeName PSObject -Property ([ordered]@{
                        'Subnet'      = $SVRDNSSubnet
                        'DNSName'     = $SVRDNSName
                        'RecordMatch' = If ($Control -eq 0){'No Match'} else {'Match'}
                        'FWD'         = $DNSIP
                        'PTR'         = $SVRIP
                        'Alive'       = $alive
                    })
                }
            }
        }
    }
    Return $DNSErr
}

#Get-DNSIssues | Format-Table
#$error[0]
